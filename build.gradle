import org.springframework.boot.gradle.tasks.run.BootRun

// Базовые плагины для Spring Boot приложения
plugins {
    // Основной плагин для Java проектов
    id 'java'
    // Плагин Spring Boot с указанием версии
    id 'org.springframework.boot' version '3.2.5'
    // Плагин для управления версиями зависимостей Spring
    id 'io.spring.dependency-management' version '1.1.7'
    // Плагин для автоматической генерации boilerplate-кода (геттеры, сеттеры и т.д.)
    id 'io.freefair.lombok' version '8.6'
    // Плагин для управления миграциями базы данных
    id 'org.flywaydb.flyway' version '9.22.3'

    id "org.openapi.generator" version "7.3.0"
}

openApiGenerate {
    generatorName = "spring" // Генератор для Spring Boot
    inputSpec = layout.projectDirectory.file("src/main/resources/api/openapi.yml").asFile.absolutePath // Путь к спецификации
    outputDir = layout.buildDirectory.dir("generated").get().asFile.absolutePath // Папка для сгенерированного кода
    apiPackage = "ru.savelevvn.api" // Пакет для API-интерфейсов
    modelPackage = "ru.savelevvn.model" // Пакет для DTO
    configOptions = [
            useSpringBoot3: "true",
            interfaceOnly: "true", // Генерировать только интерфейсы
            skipDefaultInterface: "true",
            openApiNullable: "false", // Отключить поддержку nullable-полей
            useTags: "true" // Группировать API по тегам
    ]
    globalProperties = [
            modelDocs: "false" // Отключить генерацию документации моделей
    ]
}

sourceSets {
    main {
        java {
            srcDir layout.buildDirectory.dir("generated/src/main/java")
        }
    }
}


ext {
    springBootVersion = '3.2.5'
}

// Метаданные проекта
group = 'ru.savelevvn' // Обычно используется обратный домен
version = '1.0.0' // Начальная версия приложения

// Репозитории для загрузки зависимостей
repositories {
    mavenCentral() // Основной репозиторий Maven-артефактов
}

// Секция зависимостей проекта
dependencies {
    // ===== Spring Boot стартеры =====
    // Веб-приложение (REST API)
    implementation 'org.springframework.boot:spring-boot-starter-web'
    // Безопасность (аутентификация/авторизация)
    implementation 'org.springframework.boot:spring-boot-starter-security'
    // Работа с базами данных через JPA
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    // Валидация входных данных
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    // Мониторинг и управление приложением
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    // Встроенная БД для разработки (dev-профиль)
    runtimeOnly 'com.h2database:h2'
    // PostgreSQL для продакшена (prod-профиль)
    runtimeOnly 'org.postgresql:postgresql'
    // Реализация JWT
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    //Интеграция Swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'
    //implementation 'org.hibernate.orm:hibernate-core:6.6.5.Final'
    //implementation 'com.zaxxer:HikariCP:5.1.0'
    implementation 'com.zaxxer:HikariCP'
   // implementation 'org.springframework:spring-webmvc:6.1.6'
    // Интеграционные тесты
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'
}

// Настройки Java
java {
    toolchain {
        // Используем Java 17
        languageVersion = JavaLanguageVersion.of(17)
    }
}

// Настройки компиляции
tasks.withType(JavaCompile).configureEach {
    options.release = 17 // Целевая версия Java
    options.encoding = 'UTF-8' // Кодировка исходных файлов
}

// Настройки тестов
test {
    useJUnitPlatform() // Используем JUnit 5 для тестирования

    // Автоматически активируем test-профиль при запуске тестов
    systemProperty 'spring.profiles.active', 'test'
}

// Конфигурация баннера
processResources {
    filesMatching('**/banner.txt') {
        expand(
                'appName': project.name,
                'appVersion': project.version,
                'buildDate': new Date().format("yyyy-MM-dd HH:mm:ss"),
                'javaVersion': System.getProperty('java.version'),
                'osName': System.getProperty('os.name'),
                'springBootVersion': springBootVersion
        )
    }
}

// Конфигурация Flyway для миграций базы данных
flyway {
    // URL базы данных (берётся из переменных окружения или используется значение по умолчанию)
    url = System.getenv('DB_URL') ?: 'jdbc:postgresql://localhost:5432/auth_service'
    // Пользователь БД
    user = System.getenv('DB_USER') ?: 'admin'
    // Пароль БД
    password = System.getenv('DB_PASSWORD') ?: 'admin'
    // Расположение файлов миграций
    locations = ['filesystem:src/main/resources/db/migration']
    // Автоматическое создание baseline при первой миграции
    baselineOnMigrate = true
}
// Задача для запуска с dev-профилем (H2)
tasks.register('bootRunDev', BootRun) {
    dependsOn 'build'
    group = 'application'
    description = 'Запуск с H2 (dev профиль)'
    mainClass = 'ru.savelevvn.AuthApplication'
    classpath = sourceSets.main.runtimeClasspath
    systemProperty 'spring.profiles.active', 'dev'
}
// Задача для запуска с prod-профилем (PostgreSQL)
tasks.register('bootRunProd', BootRun) {
    dependsOn 'build'
    group = 'application'
    description = 'Запуск с PostgreSQL (prod профиль)'
    mainClass = 'ru.savelevvn.AuthApplication'
    classpath = sourceSets.main.runtimeClasspath
    systemProperty 'spring.profiles.active', 'prod'
}
// Настройка задачи bootJar (сборка исполняемого JAR)
bootJar {
    archiveFileName = "${project.name}.jar"
    manifest {
        attributes(
                'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Build-Date': new Date().format("yyyy-MM-dd HH:mm:ss"),
                'Built-By': System.getProperty('user.name'),
                'Created-By': "Gradle ${gradle.gradleVersion}",
                'Build-Jdk': System.getProperty('java.version'),
                'Main-Class': 'org.springframework.boot.loader.JarLauncher'
        )
    }
}
// ===== Автоматическое управление версиями =====
// Задача для увеличения версии при сборке
tasks.register('incrementVersion') {
    doLast {
        // Разбираем текущую версию на составляющие
        def (major, minor, patch) = version.tokenize('.').collect { it.toInteger() }
        // Увеличиваем патч-версию (можно изменить на minor для минорных версий)
        def newVersion = "${major}.${minor}.${patch + 1}"
        // Обновляем версию в build.gradle
        ant.replace(
                file: 'build.gradle',
                token: "version = '${version}'",
                value: "version = '${newVersion}'"
        )
        println "Версия увеличена: ${version} → ${newVersion}"
    }
}
// Задача для создания тега версии в Git
tasks.register('tagVersion') {
    doLast {
        exec {
            commandLine 'git', 'tag', "-a", "v${version}", "-m", "Version ${version}"
        }
        println "Создан тег v${version}"
    }
}
// Альтернативный вариант - увеличение минорной версии
tasks.register('incrementMinorVersion') {
    doLast {
        def (major, minor, patch) = version.tokenize('.').collect { it.toInteger() }
        def newVersion = "${major}.${minor + 1}.0"

        ant.replace(
                file: 'build.gradle',
                token: "version = '${version}'",
                value: "version = '${newVersion}'"
        )
        println "Минорная версия увеличена: ${version} → ${newVersion}"
    }
}

// Настройка порядка выполнения задач:
// 1. Сначала сборка (build)
// 2. Затем увеличение версии (incrementVersion)
// 3. И создание тега (tagVersion)
build.finalizedBy incrementVersion
incrementVersion.finalizedBy tagVersion

// Для ручного увеличения минорной версии:
// ./gradlew incrementMinorVersion

